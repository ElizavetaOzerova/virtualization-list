{"version":3,"sources":["mocks/numbers.ts","components/RowRenderer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["numbers","Array","from","length","_","i","RowRenderer","key","index","style","useStyles","createUseStyles","list","backgroundColor","border","color","margin","padding","title","textAlign","App","classes","className","width","height","rowCount","rowHeight","rowRenderer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qMAKeA,EALCC,MAAMC,KACpB,CAAEC,OAAQ,MACV,SAACC,EAAGC,GAAJ,OAAUA,EAAI,KCkBDC,EAVgB,SAAC,GAAD,IAC7BC,EAD6B,EAC7BA,IACAC,EAF6B,EAE7BA,MACAC,EAH6B,EAG7BA,MAH6B,OAK7B,qBAAeA,MAAOA,EAAtB,SACIT,EAAQQ,IADFD,ICRNG,EAAYC,YAAgB,CAChCC,KAAM,CACJC,gBAAiB,UACjBC,OAAQ,oCACRC,MAAO,UACPC,OAAQ,SACRC,QAAS,IAEXC,MAAO,CACLH,MAAO,UACPI,UAAW,YAuBAC,EAnBC,WACd,IAAMC,EAAUX,IAEhB,OACE,qCACE,oBAAIY,UAAWD,EAAQH,MAAvB,kCAEA,cAAC,IAAD,CACEI,UAAWD,EAAQT,KACnBW,MAAO,IACPC,OAAQ,IACRC,SAAUzB,EAAQG,OAClBuB,UAAW,GACXC,YAAarB,QCpBNsB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.bb3c5ae0.chunk.js","sourcesContent":["const numbers = Array.from(\n  { length: 1000000 },\n  (_, i) => i + 1,\n);\n\nexport default numbers;\n","import React, { CSSProperties, FC } from 'react';\n\nimport numbers from '../mocks/numbers'\n\ntype Props = {\n  key: string;\n  index: number;\n  style: CSSProperties;\n}\n\nconst RowRenderer: FC<Props> = ({\n  key,\n  index,\n  style,\n}) => (\n  <div key={key} style={style}>\n    { numbers[index] }\n  </div>\n);\n\nexport default RowRenderer;\n","import React, { FC } from 'react';\nimport { List } from 'react-virtualized';\nimport { createUseStyles } from 'react-jss';\n\nimport RowRenderer from './components/RowRenderer';\nimport numbers from './mocks/numbers'\n\nconst useStyles = createUseStyles({\n  list: {\n    backgroundColor: '#edbf6a',\n    border: '4mm ridge rgba(170, 50, 220, 0.6)',\n    color: '#278600',\n    margin: '0 auto',\n    padding: 10,\n  },\n  title: {\n    color: '#80426e',\n    textAlign: 'center',\n  },\n});\n\nconst App: FC = () => {\n  const classes = useStyles();\n\n  return (\n    <>\n      <h1 className={classes.title}>Scroll to a million!</h1>\n\n      <List\n        className={classes.list}\n        width={300}\n        height={300}\n        rowCount={numbers.length}\n        rowHeight={20}\n        rowRenderer={RowRenderer}\n      />\n    </>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}